[package]
authors = ["Curly <u007d@humanenginuity.com>"]
categories = []
description = "<describe crate here>"
edition = "2021"
keywords = []
license = "MIT OR Apache-2.0"
name = "uniq_char"
readme = "README.md"
repository = "https://github.com/u007d/uniq_char"
version = "0.1.0"

[lib]
name = "lib"
path = "src/lib.rs"

[dependencies]
bool_ext = "*"
termination = "*"
thiserror = "*"

[dev-dependencies]
assert2 = "*"

[profile.dev]
debug = true
debug-assertions = true
lto = false
opt-level = 0
panic = "unwind"
rpath = false

[profile.release]
codegen-units = 1
debug = false
debug-assertions = false
lto = "fat"
opt-level = 3
panic = "unwind"
rpath = false

[profile.test]
debug = true
debug-assertions = true
lto = false
opt-level = 0
rpath = false

[lints.rust]
# To use the `unsafe` keyword, do not remove the `unsafe_code = "forbid"` entry.
# Instead, prefer to change it to `unsafe_code = "deny"` + opt-in with local use of
# `#[expect(unsafe_code)]`'s on an as needed basis.
bare_trait_objects = "forbid"
rust_2018_idioms = { level = "warn", priority = -2 }
# TODO: Remove when this is stabalized and/or works better. It's giving many false positives at time of writing (2024-08).
unfulfilled_lint_expectations = "allow"
unknown_lints = "allow"
unsafe_code = "deny"
unused_variables = "warn"
# TODO: Determine why `#[expect(unexpected_cfgs)]` at the site of the problem
#       (`target_pointer_width = 128`) is ineffective; the setting below is overly broad
unexpected_cfgs = "allow"

# Uncomment before ship to reconcile use of possibly redundant crates, debug remnants, missing
# license files and more
#missing_docs = "warn"
#warnings = "deny"

[lints.clippy]
# Safety-critical application lints
arithmetic_side_effects = "deny"
float_cmp_const = "deny"
indexing_slicing = "deny"
pedantic = { level = "deny", priority = -2 }
semicolon_if_nothing_returned = "allow"
semicolon_inside_block = "allow"
str_to_string = "allow"
unwrap_used = "deny"
wildcard_imports = "deny"

all = { level = "warn", priority = -2 }
nursery = { level = "warn", priority = -2 }
# End of safety-critical application lints

allow_attributes = "warn"
allow_attributes_without_reason = "deny"
cargo_common_metadata = { level = "allow", priority = -1 }
doc_markdown = "allow"
enum_glob_use = "forbid"
enum_variant_names = "allow"
equatable_if_let = "allow"
error_impl_error = "allow"
implicit_return = "allow"
integer_division_remainder_used = "allow"
items-after-statements = "allow"
iter_nth_zero = "allow"
match_bool = "allow"
match-same-arms = "allow"
min_ident_chars = "allow"
missing_docs_in_private_items = { level = "allow", priority = -1 }
missing_errors_doc = "allow"
missing_trait_methods = "allow"
module_name_repetitions = "allow"
multiple_crate_versions = "allow"
obfuscated_if_else = "allow"
pub_use = "allow"
pub_with_shorthand = "allow"
question_mark_used = "allow"
self_named_module_files = "allow"
semicolon_outside_block = "allow"
separated_literal_suffix = "allow"
shadow_reuse = "allow"
shadow_unrelated = "allow"
similar_names = "allow"
single_call_fn = "allow"
std_instead_of_alloc = "allow"
std_instead_of_core = "allow"
too_long_first_doc_paragraph = "allow"
unnecessary_wraps = "allow"
unreachable = "allow"

# Uncomment before ship to reconcile use of possibly redundant crates, debug remnants, missing
# license files and more
#blanket_clippy_restriction_lints = "allow"
#cargo = "warn"
#restriction = "warn"